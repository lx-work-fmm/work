import math


# ------- BRGIN lib --------
import csv
import numpy as np
def read_csv(path: str, **kw):
    """
    读取 .csv 文件为二维数组
    """
    return [v for v in csv.reader(open(path), **kw)]
def write_csv(path: str, data: list, **kw):
    """
    将二维数组写入 .csv 文件
    """
    # data 是二维数组
    if data != []:
        assert np.array(data).ndim == 2
    csv.writer(open(path, 'w', newline=''), **kw).writerows(data)
import os
def get_out_path(path: str):
    preffix, ext = os.path.splitext(path)
    return f'{preffix}-out{ext}'
# ------- END lib --------

a,b = 999999999999999999999,0
def three_antenna_method(freq: float, R: float, S21_1: float, S21_2: float, S21_3: float):
    """
    三天线法求增益
    param:
        freq(Hz)
        R(m)
        S21_1(?)
        S21_2(?)
        S21_3(?)
    return:
        (gain1_dB, gain2_dB, gain3_dB)
    """
    c = 3.0 * (10 ** 8) # 光速
    A = 20 * math.log10(4 * math.pi * R / (c / freq))
    # b1 = 10 * math.log10(10 ** (float(S21_1) / 10))
    # b2 = 10 * math.log10(10 ** (float(S21_2) / 10))
    # b3 = 10 * math.log10(10 ** (float(S21_3) / 10))
    
    b1 = float(S21_1) 
    b2 = float(S21_2)
    b3 = float(S21_3)
    global a,b
    a=min(a,A)
    b=max(b,A)

    g1 = (A + b1 + b2 - b3) / 2
    g2 = (A + b1 - b2 + b3) / 2
    g3 = (A - b1 + b2 + b3) / 2
    return (g1, g2, g3)

def test_three_antenna_method(file1: str, file2: str, file3: str, R: float):
    """
    input file format(csv):
        freq(Hz) | - | - | S21 | ...
    output file format(csv):
        freq(MHz) | gain(dB)
    """
    data1 = read_csv(file1)
    data2 = read_csv(file2)
    data3 = read_csv(file3)

    res1 = []
    res2 = []
    res3 = []
    for l1, l2, l3 in zip(data1, data2, data3):
        try:
            assert l1[0] == l2[0] == l3[0]  # 保证频率一致
            g1, g2, g3 = three_antenna_method(float(l1[0]), R, float(l1[3]), float(l2[3]), float(l3[3]))
            res1.append((float(l1[0])/(10**6), g1))
            res2.append((float(l1[0])/(10**6), g2))
            res3.append((float(l1[0])/(10**6), g3))
        except :
            pass
    
    write_csv(get_out_path(file1), res1)
    write_csv(get_out_path(file2), res2)
    write_csv(get_out_path(file3), res3)

def calc_eff(S11_dB: float):
    """
    param:
        S11_dB(?)
    return:
        efficiency(?)
    """
    return 1 - 10 ** (S11_dB / 20)

def test_calc_eff(file: str):
    """
    input file format:
        Freq(Hz) | S11(DB) | S11(DEG)
    output file format:
        Freq(MHz) | eff
    """
    data = read_csv(file)

    res = []
    for v in data:
        try:
            freq = float(v[0])/(10**6)
            S11_dB = float(v[1])
            res.append((freq, calc_eff(S11_dB)))
        except:
            pass

    write_csv(get_out_path(file), res)

def filter_and_merge(file1: str, file2: str, range1: tuple, range2: tuple, output: str, delimiter='\t'):
    """
    param:
        range -> (freq1(GHz), freq2(GHz))
    input file format(csv):
        freq(MHz) | ...
    output file format(csv):
        freq(MHz) | ...
    """
    data1 = read_csv(file1, delimiter=delimiter)
    data2 = read_csv(file2, delimiter=delimiter)

    res = []
    for v in data1:
        try:
            if range1[0] <= float(v[0])/1000 <= range1[1]:
                res.append((float(v[0]), *v[1:]))
        except ValueError as e:
            print(e)
    for v in data2:
        try:
            if range2[0] <= float(v[0])/1000 <= range2[1]:
                res.append((float(v[0]), *v[1:]))
        except ValueError as e:
            print(e)

    write_csv(output, res, delimiter=delimiter)

def get_refsat(eff_file: str, gain_file: str, out: str):
    """
    input file format(csv):
        freq(?) | eff(?)
        freq(?) | gain(?)
    input file format(csv):
        freq(?) | 0 | eff(?) | gain(?)
    """
    gain = read_csv(gain_file)
    eff = read_csv(eff_file)

    res = []
    for g, e in zip(gain, eff):
        try:
            assert g[0] == e[0]

            import math
            freq = float(g[0])
            eff = float(e[1]) - 1
            gain = float(g[1])
            res.append((freq, 0, eff, gain))
        except:
            pass
    write_csv(out, res, delimiter = '\t')


if __name__ == '__main__':
    """
    """
    test_three_antenna_method('./1/losVV_A2B_400MHz.csv', './1/losVV_A2C_400MHz.csv', './1/losVV_B2C_400MHz.csv', 5.3)
    test_three_antenna_method('./1/losVV_A2B_800MHz.csv', './1/losVV_A2C_800MHz.csv', './1/losVV_B2C_800MHz.csv', 5.71)
    
    test_calc_eff('./2/S11/600MHz_1_S11.csv')
    test_calc_eff('./2/S11/600MHz_2_S11.csv')
    test_calc_eff('./2/S11/600MHz_3_S11.csv')
    test_calc_eff('./2/S11/800MHz_1_S11.csv')
    test_calc_eff('./2/S11/800MHz_2_S11.csv')
    test_calc_eff('./2/S11/800MHz_3_S11.csv')

    # get_refsat('./2/S11/600MHz_1_S11-out.csv', './1/losVV_A2B_400MHz-out.csv',
    #            './4/Data SH400-2G-1M.satref')
    # get_refsat( './2/S11/800MHz_1_S11-out.csv', './1/losVV_A2B_800MHz-out.csv',
    #            './4/Data SH600-8.5G-1M.satref')

    # filter_and_merge('./4/Data SH400-2G-1M.satref', './4/Data SH600-8.5G-1M.satref', (0.40,0.41), (0.8,1),
    #                  './3/out1.satref')
    

    get_refsat('./2/S11/600MHz_1_S11-out.csv', './1/losVV_A2B_400MHz-out.csv', './4/Data SH400M-2G-5M_A.satref')
    get_refsat('./2/S11/600MHz_2_S11-out.csv', './1/losVV_A2C_400MHz-out.csv', './4/Data SH400M-2G-5M_B.satref')
    get_refsat('./2/S11/600MHz_3_S11-out.csv', './1/losVV_B2C_400MHz-out.csv', './4/Data SH400M-2G-5M_C.satref')
    get_refsat( './2/S11/800MHz_1_S11-out.csv', './1/losVV_A2B_800MHz-out.csv', './4/Data SH600M-8.5G-5M_A.satref')
    get_refsat( './2/S11/800MHz_2_S11-out.csv', './1/losVV_A2C_800MHz-out.csv', './4/Data SH600M-8.5G-5M_B.satref')
    get_refsat( './2/S11/800MHz_3_S11-out.csv', './1/losVV_B2C_800MHz-out.csv', './4/Data SH600M-8.5G-5M_C.satref')

    filter_and_merge('./4/Data SH400M-2G-5M_A.satref', './4/Data SH600M-8.5G-5M_A.satref', (0.4,2), (2.000001,8.5), './4/Data SH400M-8.5G-5M_A.satref')
    filter_and_merge('./4/Data SH400M-2G-5M_B.satref', './4/Data SH600M-8.5G-5M_B.satref', (0.4,2), (2.000001,8.5), './4/Data SH400M-8.5G-5M_B.satref')
    filter_and_merge('./4/Data SH400M-2G-5M_C.satref', './4/Data SH600M-8.5G-5M_C.satref', (0.4,2), (2.000001,8.5), './4/Data SH400M-8.5G-5M_C.satref')

print(a,b)